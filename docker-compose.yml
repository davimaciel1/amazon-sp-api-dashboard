version: '3.8'

networks:
  app-network:
    driver: bridge
  db-network:
    driver: bridge
    internal: true

volumes:
  postgres-data:
  redis-data:

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-amz}-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-amazon_dashboard}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--auth-local=trust --auth-host=md5"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - db-network

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-amz}-redis
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-redis}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - db-network
      - app-network

  # Backend API
  api:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: ${COMPOSE_PROJECT_NAME:-amz}-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-amazon_dashboard}?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      JWT_SECRET: ${JWT_SECRET}
      # LWA credentials are stored encrypted per tenant
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network
      - db-network

  # Frontend Next.js
  frontend:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://api:3001}
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
    container_name: ${COMPOSE_PROJECT_NAME:-amz}-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://api:3001}
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - app-network

  # Worker for SP-API Sync
  worker:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile.worker
    container_name: ${COMPOSE_PROJECT_NAME:-amz}-worker
    restart: unless-stopped
    command: node dist/workers/index.js
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-amazon_dashboard}?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis}@redis:6379
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-3}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - db-network
    deploy:
      replicas: 2

  # Credential Monitor
  monitor:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile.monitor
    container_name: ${COMPOSE_PROJECT_NAME:-amz}-monitor
    restart: unless-stopped
    command: node dist/monitors/credential-monitor.js
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-amazon_dashboard}?schema=public
      CHECK_INTERVAL: 86400000  # Daily
      ALERT_DAYS_BEFORE: 30
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - db-network

  # Nginx Proxy (for Coolify)
  proxy:
    image: nginx:alpine
    container_name: ${COMPOSE_PROJECT_NAME:-amz}-proxy
    restart: unless-stopped
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      frontend:
        condition: service_healthy
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network